service: big-time-deals-csharp

provider:
  name: aws
  runtime: dotnetcore3.1
  stage: prod
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchWriteItem"
        - "dynamodb:ConditionCheckItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
      Resource:
        - Fn::GetAtt:
          - BigTimeDealsTable 
          - Arn
        - Fn::Join: 
          - "/"
          - - Fn::GetAtt:
              - BigTimeDealsTable 
              - Arn
            - "index/GSI1"
        - Fn::Join: 
          - "/"
          - - Fn::GetAtt:
              - BigTimeDealsTable 
              - Arn
            - "index/GSI2"
        - Fn::Join: 
          - "/"
          - - Fn::GetAtt:
              - BigTimeDealsTable 
              - Arn
            - "index/GSI3"
        - Fn::Join: 
          - "/"
          - - Fn::GetAtt:
              - BigTimeDealsTable 
              - Arn
            - "index/UserIndex"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeStream"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:ListStreams"
      Resource:
        - Fn::Join: 
          - "/"
          - - Fn::GetAtt:
              - BigTimeDealsTable 
              - Arn
            - "stream/*"

  environment:
    TABLE_NAME: { Ref: BigTimeDealsTable }

package:
  individually: true

functions:
  createDeal:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.CreateDeal::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: deals
          method: post
  getDeal:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.GetDeal::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: deals/{dealId}
          method: get
  createBrand:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.BrandEndpoints.CreateBrand::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: brands
          method: post
  listBrands:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.BrandEndpoints.ListBrands::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: brands
          method: get
  getBrand:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.BrandEndpoints.GetBrand::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: brands/{name}
          method: get
  likeBrandForUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.BrandEndpoints.LikeBrandForUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: brands/{name}/likes/{username}
          method: post
  watchBrandForUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.BrandEndpoints.WatchBrandForUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: brands/{name}/watches/{username}
          method: post
  updateCategory:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.CategoryEndpoints.Update::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: categories/{name}
          method: post
  getCategory:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.CategoryEndpoints.Get::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: categories/{name}
          method: get
  likeCategoryForUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.CategoryEndpoints.LikeForUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: categories/{name}/likes/{username}
          method: post
  watchCategoryForUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.CategoryEndpoints.WatchForUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: categories/{name}/watches/{username}
          method: post
  updateFrontPage:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.UpdateFrontPage::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: /frontpage
          method: post
  getFrontPage:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.GetFrontPage::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: /frontpage
          method: get
  updateEditorsChoice:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.UpdateEditorsChoice::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: /editorschoice
          method: post
  getEditorsChoice:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.GetEditorsChoice::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: /editorschoice
          method: get
  createUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.UserEndpoints.CreateUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: users
          method: post
  getUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.UserEndpoints.GetUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: users/{username}
          method: get
  getMessagesForUser:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.UserEndpoints.GetMessagesForUser::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: users/{username}/messages
          method: get
  markMessageRead:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.UserEndpoints.MarkMessageRead::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: users/{username}/messages/{messageId}
          method: post
  sendHotDealToAllUsers:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.DealEndpoints.HotDealBlast::Execute
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - http:
          path: hotdealblast
          method: post
  streamHandler:
    handler: CsharpHandlers::DynamoDbBook.BigDeals.Serverless.Streams.StreamHandler::Handle
    package:
      artifact: bin/Release/netcoreapp3.1/DynamoDbBook.BigDeals.Serverless.zip
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [BigTimeDealsTable, StreamArn]

resources:
  Resources:
    BigTimeDealsTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions: 
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "GSI1PK"
            AttributeType: "S"
          - AttributeName: "GSI1SK"
            AttributeType: "S"
          - AttributeName: "GSI2PK"
            AttributeType: "S"
          - AttributeName: "GSI2SK"
            AttributeType: "S"
          - AttributeName: "GSI3PK"
            AttributeType: "S"
          - AttributeName: "GSI3SK"
            AttributeType: "S"
          - AttributeName: "UserIndex"
            AttributeType: "S"
        KeySchema: 
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        BillingMode: "PAY_PER_REQUEST"
        StreamSpecification:
          StreamViewType: 'NEW_IMAGE'
        GlobalSecondaryIndexes:
          - IndexName: 'GSI1'
            KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
          - IndexName: 'GSI2'
            KeySchema:
            - AttributeName: "GSI2PK"
              KeyType: "HASH"
            - AttributeName: "GSI2SK"
              KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
          - IndexName: 'GSI3'
            KeySchema:
            - AttributeName: "GSI3PK"
              KeyType: "HASH"
            - AttributeName: "GSI3SK"
              KeyType: "RANGE"
            Projection:
              ProjectionType: ALL
          - IndexName: 'UserIndex'
            KeySchema:
            - AttributeName: "UserIndex"
              KeyType: "HASH"
            Projection:
              ProjectionType: ALL